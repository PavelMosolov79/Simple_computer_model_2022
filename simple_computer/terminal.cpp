#include "terminal.h"

// функция очистки экрана
int clear_screen() {
    printf("\033[H\033[2J");	// последовательность для очистки экрана и перемещения курсора в левый верхний угол
    
    return 0;
}

// функция получения размера терминала
int get_screen_size(int *count_rows, int *count_columns) {
	struct winsize window_size;		// структура, описывающая размер терминала
	
	// получаем размер терминала и выходим, если не получилось
    if (ioctl(1, TIOCGWINSZ, &window_size)) {
    	return -1;
	}
    
    *count_rows = window_size.ws_row;		// передаём в переменную количество строк терминала
    *count_columns = window_size.ws_col;	// передаём в переменную количество столбцов терминала
    
	return 0;
}

// функция перемещения курсора на определённые координаты
int goto_xy(int x, int y) {
	int rows;		// текущее количество строчек в терминале
	int columns;	// текущее количество столбцов в терминале
	
	// получаем размер терминала и выходим, если функция завершилась с ошибкой
    if (get_screen_size(&rows, &columns) == -1) {
    	return -1;
	}
	
	// проверяем на возможность перемещения курсора в заданные координаты
	if ((x <= 0) || (x > columns)) {
		return -1;
	}
	
	if ((y <= 0) || (y > rows)) {
		return -1;
	}

    printf("\033[%d;%dH", y, x);	// последовательность для перемещения курсора в указанные координаты
    
    return 0;
}

// функция изменения цвета всем полседующим выводящимся символам
int set_symbols_color(enum colors color) {
	printf("\033[38;5;%dm", color);		// последовательность для изменения цвета символов
    
	return 0;
}

// функция изменения фона всех последующие выводящихся символов
int set_background_color(enum colors color) {
	printf("\033[48;5;%dm", color);		// последовательность для изменения цвета фона
    
	return 0;
}

// функция возвращения цветов к исходным
int set_default_color() {
	printf("\033[0m");					// последовательность для восстановления цветов к исходным
    
	return 0;
}
